name: web-whoami
available_at: "2020-03-20T00:00:00Z"
type: web
expires: 1800
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "ctf-{{ deployment_id }}"
  namespace: ctf-challenges-isolated
  labels:
    role: iso-chal
    category: web # category name
    challenge: whoami # challenge name
    ctf-isolated/deployment: "{{ deployment_id }}"
    ctf-isolated/owner: "{{ owner_id }}"
  annotations:
    janitor/expires: "{{ expires }}"
spec:
  replicas: 1
  tolerations:
  - key: "ctf-challenge-type"
    operator: "Equal"
    value: "isolated"
    effect: "NoExecute"
  nodeSelector:
    ctf-challenge-type: isolated
  selector:
    matchLabels:
      role: iso-chal
      name: "{{ deployment_id }}"
  template:
    metadata:
      labels:
        role: iso-chal
        name: "{{ deployment_id }}"
    spec:
      tolerations:
      - key: "ctf-challenge-type"
        operator: "Equal"
        value: "isolated"
        effect: "NoExecute"
      nodeSelector:
        ctf-challenge-type: isolated
      enableServiceLinks: false
      automountServiceAccountToken: false
      containers:
      - name: web
        image: containous/whoami:latest 
        resources:
          limits:
            cpu: 20m
            memory: 64Mi
          requests:
            cpu: 10m
            memory: 32Mi
        ports:
        - containerPort: 80
          name: port-80
---
apiVersion: v1
kind: Service
metadata:
  name: "ctf-{{ deployment_id }}"
  namespace: ctf-challenges-isolated
  labels:
    role: iso-chal
    category: web # category name
    challenge: whoami # challenge name
    ctf-isolated/deployment: "{{ deployment_id }}"
    ctf-isolated/owner: "{{ owner_id }}"
  annotations:
    janitor/expires: "{{ expires }}"
spec:
  selector:
    role: iso-chal
    name: "{{ deployment_id }}"
  ports:
    - port: 80
      name: port-80
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: ingress-ctf-{{ deployment_id }}
  namespace: ctf-challenges-isolated
  labels:
    category: web
    challenge: whoami
    ctf-isolated/deployment: "{{ deployment_id }}"
    ctf-isolated/owner: "{{ owner_id }}"
  annotations:
    janitor/expires: "{{ expires }}"
spec:
  entryPoints:
    - web
    - websecure
  tls:
    certResolver: default
  routes:
    - match: Host(`{{ deployment_id }}.{{ domain }}`)
      kind: Rule
      priority: 10
      middlewares:
      - name: secure-headers
      services:
      - name: ctf-{{ deployment_id }}
        port: 80